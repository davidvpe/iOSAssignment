//
//  ProductListInteractor.swift
//  iOSAssignment
//
//  Created by David Velarde on 18/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductListBusinessLogic {
    func initialLoad(request: ProductList.InitialLoad.Request)
    func startProductInteraction(request: ProductList.ProductInteraction.Request)
    func updateCart(request: ProductList.CartUpdate.Request)
}

protocol ProductListDataStore {
    //var name: String { get set }
}

class ProductListInteractor: ProductListBusinessLogic, ProductListDataStore {
    
    var presenter: ProductListPresentationLogic?
    
    var products = [ProductRaw]()
    
    lazy var productListWorker: ProductListWorkerInterface = {
        return ProductListWorker()
    }()
    
    lazy var cartWorker: CartWorkerInterface = {
        return CartWorker()
    }()
    
    var isLoading = false
    
    var timer: Timer?
    var currentInteractingProductIndex: Int?
  
    // MARK: Do something
  
    func initialLoad(request: ProductList.InitialLoad.Request) {
        
        isLoading = true
        
        productListWorker.getProducts(start: products.count, amount: 10) { [weak self] products in
            self?.products.append(contentsOf: products.products)
            self?.isLoading = false
            self?.listProducts()
        }
    }
    
    func updateCart(request: ProductList.CartUpdate.Request) {
        
        extendTimer()
        
        guard request.productIndex < products.count else {
            return
        }
        
        let product = products[request.productIndex]
        
        switch request.type {
        case .add:
            cartWorker.addProductToCart(product: product)
        case .remove:
            cartWorker.removeProductFromCart(product: product)
        }
        
        listProducts()
        
        let foundCartProduct = cartWorker.cartProducts.first(where: { $0.product.id == product.id })
        
        if foundCartProduct == nil {
            finishInteraction(index: request.productIndex)
        }
        
        let response = ProductList.CartUpdate.Response(index: request.productIndex)
        presenter?.updateProductCell(response: response)
    }
    
    func startProductInteraction(request: ProductList.ProductInteraction.Request) {
        
        timer?.invalidate()
        timer = nil
        
        if let currentIndex = currentInteractingProductIndex {
            finishInteraction(index: currentIndex)
            currentInteractingProductIndex = nil
        }
        
        startInteraction(index: request.index)
        currentInteractingProductIndex = request.index
        
        timer = Timer.scheduledTimer(withTimeInterval: 2, repeats: false, block: { [weak self] _ in
            self?.finishInteraction(index: request.index)
            self?.currentInteractingProductIndex = nil
        })
    }
    
    func extendTimer() {
        
        guard let currentIndex = currentInteractingProductIndex else { return }
        
        timer?.invalidate()
        timer = nil
        
        timer = Timer.scheduledTimer(withTimeInterval: 2, repeats: false, block: { [weak self] _ in
            self?.finishInteraction(index: currentIndex)
            self?.currentInteractingProductIndex = nil
        })
    }
    
    private func startInteraction(index: Int) {
        
        guard let product = products[safe: index] else { return }
        
        let foundCartProduct = cartWorker.cartProducts.first(where: { $0.product.id == product.id })
        
        if foundCartProduct == nil {
            
            cartWorker.addProductToCart(product: product)
            
            listProducts()
            
            let response = ProductList.CartUpdate.Response(index: index)
            presenter?.updateProductCell(response: response)
        }
        
        let response = ProductList.StartProductInteraction.Response(index: index)
        presenter?.startProductInteraction(response: response)
    }
    
    private func finishInteraction(index: Int) {
        let response = ProductList.FinishProductInteraction.Response(index: index)
        presenter?.finishProductInteraction(response: response)
    }
    private func listProducts() {
        let response = ProductList.ListProducts.Response(products: products, cartProducts: cartWorker.cartProducts)
        presenter?.listProducts(response: response)
    }
}
