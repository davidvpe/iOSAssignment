//
//  ProductListPresenter.swift
//  iOSAssignment
//
//  Created by David Velarde on 18/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductListPresentationLogic {
    func listProducts(response: ProductList.ListProducts.Response)
    func startProductInteraction(response: ProductList.StartProductInteraction.Response)
    func finishProductInteraction(response: ProductList.FinishProductInteraction.Response)
}

class ProductListPresenter: ProductListPresentationLogic {
    
    weak var viewController: ProductListDisplayLogic?
  
    // MARK: Implementation
    func listProducts(response: ProductList.ListProducts.Response) {
        let products = response.products
        let cartProducts = response.cartProducts
        
        let newProducts = products.map { prod -> CartProduct in
            
            let cartProductFound = cartProducts.first(where: { cartProd in
                cartProd.product.id == prod.id
            })
            
            if let product = cartProductFound {
                return CartProduct(product: prod, amount: product.amount)
            } else {
                return CartProduct(product: prod, amount: 0)
            }
        }
        
        let viewModel = ProductList.ListProducts.ViewModel(products: newProducts)
        viewController?.listProducts(viewModel: viewModel)
    }
    
    func startProductInteraction(response: ProductList.StartProductInteraction.Response) {
        let viewModel = ProductList.StartProductInteraction.ViewModel(index: response.index)
        viewController?.startProductInteraction(viewModel: viewModel)
    }
    
    func finishProductInteraction(response: ProductList.FinishProductInteraction.Response) {
        let viewModel = ProductList.FinishProductInteraction.ViewModel(index: response.index)
        viewController?.finishProductInteraction(viewModel: viewModel)
    }
}
