//
//  ProductListPresenterTests.swift
//  iOSAssignment
//
//  Created by David Velarde on 18/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iOSAssignment
import XCTest

class ProductListPresenterTests: XCTestCase {
    // MARK: Subject under test
  
    var sut: ProductListPresenter!
  
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        setupProductListPresenter()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupProductListPresenter() {
        sut = ProductListPresenter()
    }
  
    // MARK: Test doubles
  
    class ProductListDisplayLogicSpy: ProductListDisplayLogic {
        
        var startProductInteractionCalled = false
        var finishProductInteractionCalled = false
        var listProductsCalled = false
        var updateProductCellCalled = false
        var finalProductsCount = 0
        
        func listProducts(viewModel: ProductList.ListProducts.ViewModel) {
            listProductsCalled = true
            finalProductsCount = viewModel.products.count
        }
        
        func startProductInteraction(viewModel: ProductList.StartProductInteraction.ViewModel) {
            startProductInteractionCalled = true
        }
        
        func finishProductInteraction(viewModel: ProductList.FinishProductInteraction.ViewModel) {
            finishProductInteractionCalled = true
        }
        
        func updateProductCell(viewModel: ProductList.CartUpdate.ViewModel) {
            updateProductCellCalled = true
        }
    }
  
    // MARK: Tests
  
    func testListProductsCalled() {
        // Given
        let spy = ProductListDisplayLogicSpy()
        sut.viewController = spy
        let response = ProductList.ListProducts.Response(products: [ProductRaw](), cartProducts: [CartProduct]())
    
        // When
        sut.listProducts(response: response)
    
        // Then
        XCTAssertTrue(spy.listProductsCalled, "listProducts(response:) should ask the view controller to display the products")
    }
    
    func testListProductsAmount() {
        // Given
        let spy = ProductListDisplayLogicSpy()
        sut.viewController = spy
        let response = ProductList.ListProducts.Response(products: [
                                                            Product.create(withId: "0"),
                                                            Product.create(withId: "1")],
                                                         cartProducts: [
                                                            CartProduct(product: Product.create(withId: "0"),
                                                                        amount: 15)])
        // When
        sut.listProducts(response: response)
    
        // Then
        XCTAssertEqual(spy.finalProductsCount, 2, "listProducts(response:) should ask the view controller to display only 2 products")
    }
    
    func testStartProductInteraction() {
        // Given
        let spy = ProductListDisplayLogicSpy()
        sut.viewController = spy
        let response = ProductList.StartProductInteraction.Response(index: 5)
    
        // When
        sut.startProductInteraction(response: response)
    
        // Then
        XCTAssertTrue(spy.startProductInteractionCalled, "startProductInteraction(response:) should ask the view controller to start the interaction animation")
    }
    
    func testFinishProductInteraction() {
        // Given
        let spy = ProductListDisplayLogicSpy()
        sut.viewController = spy
        let response = ProductList.FinishProductInteraction.Response(index: 5)
    
        // When
        sut.finishProductInteraction(response: response)
    
        // Then
        XCTAssertTrue(spy.finishProductInteractionCalled, "finishProductInteraction(response:) should ask the view controller to finish the interaction animation")
    }
}
