//
//  ProductListViewControllerTests.swift
//  iOSAssignment
//
//  Created by David Velarde on 18/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iOSAssignment
import XCTest

class ProductListViewControllerTests: XCTestCase {

    // MARK: Subject under test
  
    var sut: ProductListViewController!
    var window: UIWindow!
  
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupProductListViewController()
    }
  
    override func tearDown() {
        window = nil
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupProductListViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ProductListViewController") as! ProductListViewController
    }
  
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
  
    // MARK: Test doubles
  
    class ProductListBusinessLogicSpy: ProductListBusinessLogic {
        var doSomethingCalled = false
    
        func doSomething(request: ProductList.Something.Request) {
            doSomethingCalled = true
        }
    }
  
    // MARK: Tests
  
    func testShouldDoSomethingWhenViewIsLoaded() {
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
    
        // When
        loadView()
    
        // Then
        XCTAssertTrue(spy.doSomethingCalled, "viewDidLoad() should ask the interactor to do something")
    }
  
    func testDisplaySomething() {
        // Given
        let viewModel = ProductList.Something.ViewModel()
    
        // When
        loadView()
        sut.displaySomething(viewModel: viewModel)
    
        // Then
        //XCTAssertEqual(sut.nameTextField.text, "", "displaySomething(viewModel:) should update the name text field")
    }
}
