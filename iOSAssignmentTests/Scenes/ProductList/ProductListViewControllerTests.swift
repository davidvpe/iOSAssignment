//
//  ProductListViewControllerTests.swift
//  iOSAssignment
//
//  Created by David Velarde on 18/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iOSAssignment
import XCTest

class ProductListViewControllerTests: XCTestCase {

    // MARK: Subject under test
  
    var sut: ProductListViewController!
    var window: UIWindow!
  
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupProductListViewController()
    }
  
    override func tearDown() {
        window = nil
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupProductListViewController() {
        sut = ProductListViewController()
    }
  
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
  
    // MARK: Test doubles
  
    class ProductListBusinessLogicSpy: ProductListBusinessLogic {
        
        var initialLoadCalled = false
        var addProductToCartCalled = false
        var removeProductFromCartCalled = false
        var startProductInteractionCalled = false
        
        func initialLoad(request: ProductList.InitialLoad.Request) {
            initialLoadCalled = true
        }
        
        func updateCart(request: ProductList.CartUpdate.Request) {
            addProductToCartCalled = true
        }
        
        func removeProductFromCart(request: ProductList.CartUpdate.Request) {
            removeProductFromCartCalled = true
        }
        
        func startProductInteraction(request: ProductList.ProductInteraction.Request) {
            startProductInteractionCalled = true
        }
    }
  
    // MARK: Tests
  
    func testInitialLoad() {
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
    
        // When
        loadView()
    
        // Then
        XCTAssertTrue(spy.initialLoadCalled, "viewDidLoad() should ask the interactor to do the initial data load")
    }
    
    func testForceLoadData() {
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
    
        // When
        sut.loadData()
    
        // Then
        XCTAssertTrue(spy.initialLoadCalled, "loadData() should ask the interactor to do the initial data load")
    }
  
    func testListProducts() {
        // Given
        let viewModel = ProductList.ListProducts.ViewModel(products: [CartProduct(product: Product.create(withId: "1"), amount: 10),
                                                                      CartProduct(product: Product.create(withId: "2"), amount: 10),
                                                                      CartProduct(product: Product.create(withId: "3"), amount: 10),
                                                                      CartProduct(product: Product.create(withId: "4"), amount: 10)])
    
        // When
        loadView()
        sut.listProducts(viewModel: viewModel)
    
        // Then
        XCTAssertEqual(sut.products, viewModel.products, "listProducts(viewModel:) should update the products being shown on the viewController")
    }
    
    func testStartInteraction() {
        // Given
        let viewModel = ProductList.StartProductInteraction.ViewModel(index: 5)
        
        // When
        loadView()
        sut.startProductInteraction(viewModel: viewModel)
        
        // Then
        let cell = sut.productListView.tableView.cellForRow(at: IndexPath(row: 5, section: 0)) as? ProductCell
        XCTAssertNotNil(cell, "Cell on index 5 should be ProductCell")
        
        XCTAssertEqual(cell?.state, .interaction, "Cell on index 5 should have interaction state")
    }
    
    func testFinishInteraction() {
        // Given
        let viewModel = ProductList.FinishProductInteraction.ViewModel(index: 5)
        
        // When
        loadView()
        sut.finishProductInteraction(viewModel: viewModel)
        
        // Then
        let cell = sut.productListView.tableView.cellForRow(at: IndexPath(row: 5, section: 0)) as? ProductCell
        XCTAssertNotNil(cell, "Cell on index 5 should be ProductCell")
        
        XCTAssertEqual(cell?.state, .normal, "Cell on index 5 should have interaction state")
    }
    
    func testAddProductToCart() {
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.addProductToCart(index: 0)
        
        // Then
        XCTAssertTrue(spy.addProductToCartCalled, "addProductToCart(index:) should call the addProductToCart method on the interactor")
    }
    
    func testRemoveProductToCart() {
        // Given
        let spy = ProductListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.removeProductFromCart(index: 0)
        
        // Then
        XCTAssertTrue(spy.removeProductFromCartCalled, "removeProductFromCart(index:) should call the removeProductFromCart method on the interactor")
    }
}
