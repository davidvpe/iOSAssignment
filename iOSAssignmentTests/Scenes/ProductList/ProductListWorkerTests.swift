//
//  ProductListWorkerTests.swift
//  iOSAssignment
//
//  Created by David Velarde on 18/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iOSAssignment
import XCTest

class ProductListWorkerTests: XCTestCase {
  
    // MARK: Subject under test
    
    var sut: ProductListWorker!
    
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        setupProductListWorker()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: Test setup
  
    enum Possibilities {
        case undefined
        case empty
        case filled
    }
    
    class ProductRepositorySpy: ProductsRepositoryType {
        var possibility: Possibilities = .empty
        func fetchRawProducts() -> Products? {
            switch possibility {
            case .empty:
                return Products(products: [ProductRaw]())
            case .undefined:
                return nil
            case .filled:
                return Products(products: Array(0...100).map({ Product.create(withId: "\($0)") }))
            }
        }
    }
    
    func setupProductListWorker() {
        sut = ProductListWorker()
    }
  
    // MARK: Test doubles
  
    // MARK: Tests
  
    func testGetProductsWithRange() {
        // Given
        let spy = ProductRepositorySpy()
        spy.possibility = .filled
        sut.productRepository = spy
        // When
        let productsReturned = sut.getProducts(start: 0, end: 10)
        // Then
        XCTAssertEqual(productsReturned.products.count, 10, "There should only be 10 products returned")
    }
    
    func testGetProductsWhenNoProductsAvailable() {
        // Given
        let spy = ProductRepositorySpy()
        spy.possibility = .empty
        sut.productRepository = spy
        // When
        let productsReturned = sut.getProducts(start: 0, end: 10)
        // Then
        XCTAssertEqual(productsReturned.products.count, 0, "There should not be products returned")
    }
    
    func testGetProductsWhenProductFailToBeReturned() {
        // Given
        let spy = ProductRepositorySpy()
        spy.possibility = .undefined
        sut.productRepository = spy
        // When
        let productsReturned = sut.getProducts(start: 0, end: 10)
        // Then
        XCTAssertEqual(productsReturned.products.count, 0, "There should not be products returned")
    }
}
